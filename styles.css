#container {
  background-color: rgb(82, 23, 81);
  padding: 10px;
  width: 600px;
  display: flex;
  /* by setting the display property to flex, we can use properties which are assigned to flex
  boxes such as flex-direction or flex-wrap. */
  flex-direction: row;
  /* flex-direction: column; */
  flex-wrap: nowrap;
  /* nowrap - if we decrease the size of our browser window then nothing happen.
  Instead the elements stay where they were before. Which means by setting flex-wrap to nowrap
  the the website becomes a un-responsive design. */

  /* flex-wrap: wrap; */
  /* when we set flex-wrap into wrap then the design becomes responsive. Which means if we set
  decrease the size of our browser window, then the elements on the flexbox change their positions. */

  /* flex-direction: column-reverse; */
  /* This makes <div> and <nav> elements to switch their positions. */

  /* The default flex-direction is set to row, and the default flex-wrap is set to nowrap.
  Therefore we don't actually need to define the values as row and nowrap in this css file.
  But I have done it for demonstration purposes. */

  /* flex-flow: row nowrap; */
  /* This is simply a combination of flex-direction and flex-wrap. */

  align-items: center;
  /* align flexbox items to the center. */

  justify-content: space-between;
  /* Makes the remaining space come to the middle. */
}

p {
  background-color: rgb(211, 88, 209);
  margin: 10px;
  width: 250px;
}

ul {
  background-color: rgb(250, 146, 63);
  list-style: none;
  width: 250px;
  margin: 10px;
  padding: 0;
}

li {
  background-color: rgb(238, 212, 192);
  width: 100px;
}
